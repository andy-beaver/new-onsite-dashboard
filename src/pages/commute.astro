---
// src/pages/commute.astro
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import NavBar from '../components/NavBar.astro';
import type { OnsiteData } from '../types';

// Import JSON data with type assertion
import onsiteDataImport from '../data/onsiteData.json';
const onsiteData = onsiteDataImport as unknown as OnsiteData;

// Import commute data
let commuteData = { commute: {}, commuteLogs: [], gasHistory: [] };
try {
  commuteData = await import('../data/commuteData.json');
} catch (e) {
  console.log('Commute data not found, using defaults');
  
  // Default commute config if file doesn't exist yet
  commuteData = {
    commute: {
      route: {
        from: "St. Joseph, MO",
        to: "1 Memorial Dr, Kansas City, MO",
        distanceOneWay: 55,
        unit: "miles",
        timeOneWayMinutes: 55
      },
      vehicle: {
        make: "Honda",
        model: "Civic",
        year: 2017,
        efficiency: 33,
        unit: "mpg",
        maintenanceCostPerMile: 0.08
      },
      preferences: {
        hourlyValueOfTime: 30,
        currency: "USD"
      }
    },
    commuteLogs: [],
    gasHistory: []
  };
}

// Define currentPage for navbar
const currentPage = 'commute';

// Calculate metrics
const config = commuteData.commute;
const logs = commuteData.commuteLogs || [];
const gasHistory = commuteData.gasHistory || [];

// Get overall metrics
const currentDate = new Date();
const currentMonthIndex = currentDate.getMonth();
const currentYear = currentDate.getFullYear();
const currentMonth = onsiteData.months[currentMonthIndex];

// Organize gas prices by month
const gasPricesByMonth = gasHistory.reduce((acc, entry) => {
  const date = new Date(entry.date);
  const monthYear = `${date.getMonth() + 1}-${date.getFullYear()}`;
  
  if (!acc[monthYear]) {
    acc[monthYear] = [];
  }
  
  acc[monthYear].push(entry.pricePerGallon);
  return acc;
}, {});

// Calculate average gas price by month
const avgGasPriceByMonth = Object.entries(gasPricesByMonth).map(([monthYear, prices]) => {
  const [month, year] = monthYear.split('-');
  const avgPrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;
  
  return {
    month: parseInt(month),
    year: parseInt(year),
    avgPrice: avgPrice.toFixed(2)
  };
});

// Get current or most recent gas price
const mostRecentGasPrice = gasHistory.length > 0 
  ? gasHistory.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0].pricePerGallon
  : 3.50; // Default if no data

// Calculate costs
const distanceOneWay = config?.route?.distanceOneWay || 55;
const fullCommuteMiles = distanceOneWay * 2;
const mpg = config?.vehicle?.efficiency || 33;
const maintenanceCostPerMile = config?.vehicle?.maintenanceCostPerMile || 0.08;

// Current month costs
const currentMonthTrips = currentMonth.badge_count || 0;
const totalMiles = currentMonthTrips * fullCommuteMiles;
const gallonsUsed = totalMiles / mpg;
const fuelCost = gallonsUsed * mostRecentGasPrice;
const maintenanceCost = totalMiles * maintenanceCostPerMile;
const totalCommuteCost = fuelCost + maintenanceCost;

// Time calculations
const timeOneWayMinutes = config?.route?.timeOneWayMinutes || 55;
const totalCommuteTimeHours = (currentMonthTrips * timeOneWayMinutes * 2) / 60;
const hourlyValue = config?.preferences?.hourlyValueOfTime || 30;
const timeValue = totalCommuteTimeHours * hourlyValue;

// Format currency
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('en-US', { 
    style: 'currency', 
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2 
  }).format(amount);
};

const basePath = '/rto'; // Make sure this matches your repo name
---

<Layout>
  <main class="container mx-auto p-4 sm:p-6 lg:p-8 max-w-7xl">
    <header class="mb-8">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center">
        <div>
          <h1 class="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-primary-600 to-indigo-600 text-transparent bg-clip-text">
            Commute Costs
          </h1>
          <p class="text-gray-500 dark:text-gray-400 mt-2">
            Track the time and money spent commuting to the office
          </p>
        </div>
        <a 
          href={`${basePath}/`}
          class="mt-4 sm:mt-0 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Back to Dashboard
        </a>
      </div>
    </header>

    <NavBar currentPage={currentPage} />

    <!-- Summary Card -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
      <Card className="col-span-1">
        <h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Current Month Summary</h2>
        
        <div class="space-y-4 text-gray-700 dark:text-gray-300">
          <div class="flex justify-between">
            <span>Onsite Days:</span>
            <span class="font-medium">{currentMonthTrips} days</span>
          </div>
          
          <div class="flex justify-between">
            <span>Total Distance:</span>
            <span class="font-medium">{totalMiles.toFixed(0)} miles</span>
          </div>
          
          <div class="flex justify-between">
            <span>Current Gas Price:</span>
            <span class="font-medium">{formatCurrency(mostRecentGasPrice)}/gallon</span>
          </div>
          
          <div class="flex justify-between">
            <span>Fuel Cost:</span>
            <span class="font-medium">{formatCurrency(fuelCost)}</span>
          </div>
          
          <div class="flex justify-between">
            <span>Vehicle Maintenance:</span>
            <span class="font-medium">{formatCurrency(maintenanceCost)}</span>
          </div>
          
          <div class="border-t border-gray-200 dark:border-gray-700 pt-3 mt-3">
            <div class="flex justify-between font-semibold">
              <span>Total Cost:</span>
              <span class="text-red-600 dark:text-red-400">{formatCurrency(totalCommuteCost)}</span>
            </div>
          </div>
        </div>
      </Card>
      
      <Card className="col-span-1">
        <h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Time Investment</h2>
        
        <div class="space-y-4 text-gray-700 dark:text-gray-300">
          <div class="flex justify-between">
            <span>Commute Time (One Way):</span>
            <span class="font-medium">{timeOneWayMinutes} minutes</span>
          </div>
          
          <div class="flex justify-between">
            <span>Monthly Commute Time:</span>
            <span class="font-medium">{totalCommuteTimeHours.toFixed(1)} hours</span>
          </div>
          
          <div class="flex justify-between">
            <span>Your Hourly Value:</span>
            <span class="font-medium">{formatCurrency(hourlyValue)}/hour</span>
          </div>
          
          <div class="border-t border-gray-200 dark:border-gray-700 pt-3 mt-3">
            <div class="flex justify-between font-semibold">
              <span>Time Value:</span>
              <span class="text-amber-600 dark:text-amber-400">{formatCurrency(timeValue)}</span>
            </div>
          </div>
          
          <div class="border-t border-gray-200 dark:border-gray-700 pt-3 mt-3">
            <div class="flex justify-between font-bold">
              <span>Total Cost (Money + Time):</span>
              <span class="text-red-600 dark:text-red-400">{formatCurrency(totalCommuteCost + timeValue)}</span>
            </div>
          </div>
        </div>
      </Card>
    </div>
    
    <!-- Vehicle & Route Details -->
    <Card className="mb-8">
      <h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Commute Details</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 text-gray-700 dark:text-gray-300">
        <div>
          <h3 class="text-lg font-medium mb-2 text-gray-800 dark:text-gray-200">Vehicle</h3>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span>Vehicle:</span>
              <span>{config?.vehicle?.year} {config?.vehicle?.make} {config?.vehicle?.model}</span>
            </div>
            <div class="flex justify-between">
              <span>Fuel Efficiency:</span>
              <span>{config?.vehicle?.efficiency} {config?.vehicle?.unit}</span>
            </div>
            <div class="flex justify-between">
              <span>Maintenance Cost:</span>
              <span>{formatCurrency(config?.vehicle?.maintenanceCostPerMile)}/mile</span>
            </div>
          </div>
        </div>
        
        <div>
          <h3 class="text-lg font-medium mb-2 text-gray-800 dark:text-gray-200">Route</h3>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span>From:</span>
              <span>{config?.route?.from}</span>
            </div>
            <div class="flex justify-between">
              <span>To:</span>
              <span>{config?.route?.to}</span>
            </div>
            <div class="flex justify-between">
              <span>Distance (one way):</span>
              <span>{config?.route?.distanceOneWay} {config?.route?.unit}</span>
            </div>
            <div class="flex justify-between">
              <span>Time (one way):</span>
              <span>{config?.route?.timeOneWayMinutes} minutes</span>
            </div>
          </div>
        </div>
      </div>
    </Card>
    
    <!-- Gas Price History -->
    <Card className="mb-8">
      <h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Gas Price History</h2>
      
      {gasHistory.length === 0 ? (
        <p class="text-gray-500 dark:text-gray-400">No gas price data available yet. Record some onsite days to see gas price history.</p>
      ) : (
        <div class="overflow-x-auto">
          <table class="w-full text-sm text-left text-gray-700 dark:text-gray-300">
            <thead class="text-xs uppercase bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300">
              <tr>
                <th class="py-3 px-6">Date</th>
                <th class="py-3 px-6">Price Per Gallon</th>
              </tr>
            </thead>
            <tbody>
              {gasHistory.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).map((entry) => (
                <tr class="border-b dark:border-gray-700">
                  <td class="py-4 px-6">{new Date(entry.date).toLocaleDateString()}</td>
                  <td class="py-4 px-6">{formatCurrency(entry.pricePerGallon)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </Card>
  </main>
</Layout>